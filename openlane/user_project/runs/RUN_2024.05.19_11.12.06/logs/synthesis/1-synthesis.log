
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.38 (git sha1 543faed9c8c, clang++ 16.0.6 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Liberty frontend: /Users/marwan/work/caravel_user_sram/dependencies/pdks/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: /Users/marwan/work/caravel_user_mpc/openlane/user_project/../../verilog/rtl/user_project.v
Parsing SystemVerilog input from `/Users/marwan/work/caravel_user_mpc/openlane/user_project/../../verilog/rtl/user_project.v' to AST representation.
Storing AST representation for module `$abstract\user_project'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /Users/marwan/work/caravel_user_mpc/openlane/user_project/../../verilog/rtl/counter.v
Parsing SystemVerilog input from `/Users/marwan/work/caravel_user_mpc/openlane/user_project/../../verilog/rtl/counter.v' to AST representation.
Storing AST representation for module `$abstract\counter'.
Successfully finished Verilog frontend.

4. Executing HIERARCHY pass (managing design hierarchy).

5. Executing AST frontend in derive mode using pre-parsed AST for module `\user_project'.
Generating RTLIL representation for module `\user_project'.

5.1. Analyzing design hierarchy..
Top module:  \user_project
Parameter \COUNT_STEP = 1

5.2. Executing AST frontend in derive mode using pre-parsed AST for module `\counter'.
Parameter \COUNT_STEP = 1
Generating RTLIL representation for module `$paramod\counter\COUNT_STEP=s32'00000000000000000000000000000001'.

5.3. Analyzing design hierarchy..
Top module:  \user_project
Used module:     $paramod\counter\COUNT_STEP=s32'00000000000000000000000000000001

5.4. Analyzing design hierarchy..
Top module:  \user_project
Used module:     $paramod\counter\COUNT_STEP=s32'00000000000000000000000000000001
Removing unused module `$abstract\counter'.
Removing unused module `$abstract\user_project'.
Removed 2 unused modules.

6. Generating Graphviz representation of design.
Writing dot description to `/Users/marwan/work/caravel_user_mpc/openlane/user_project/runs/RUN_2024.05.19_11.12.06/tmp/synthesis/hierarchy.dot'.
Dumping module user_project to page 1.
Renaming module user_project to user_project.

7. Executing TRIBUF pass.

8. Executing HIERARCHY pass (managing design hierarchy).

8.1. Analyzing design hierarchy..
Top module:  \user_project
Used module:     $paramod\counter\COUNT_STEP=s32'00000000000000000000000000000001

8.2. Analyzing design hierarchy..
Top module:  \user_project
Used module:     $paramod\counter\COUNT_STEP=s32'00000000000000000000000000000001
Removed 0 unused modules.

9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

10. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$/Users/marwan/work/caravel_user_mpc/openlane/user_project/../../verilog/rtl/counter.v:68$10 in module $paramod\counter\COUNT_STEP=s32'00000000000000000000000000000001.
Removed a total of 0 dead cases.

11. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 0 assignments to connections.

12. Executing PROC_INIT pass (extract init attributes).

13. Executing PROC_ARST pass (detect async resets in processes).

14. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~8 debug messages>

15. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\counter\COUNT_STEP=s32'00000000000000000000000000000001.$proc$/Users/marwan/work/caravel_user_mpc/openlane/user_project/../../verilog/rtl/counter.v:68$10'.
     1/6: $0\count[29:0] [29:24]
     2/6: $0\count[29:0] [15:8]
     3/6: $0\count[29:0] [7:0]
     4/6: $0\count[29:0] [23:16]
     5/6: $0\rdata[29:0]
     6/6: $0\ready[0:0]

16. Executing PROC_DLATCH pass (convert process syncs to latches).

17. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `$paramod\counter\COUNT_STEP=s32'00000000000000000000000000000001.\count' using process `$paramod\counter\COUNT_STEP=s32'00000000000000000000000000000001.$proc$/Users/marwan/work/caravel_user_mpc/openlane/user_project/../../verilog/rtl/counter.v:68$10'.
  created $dff cell `$procdff$78' with positive edge clock.
Creating register for signal `$paramod\counter\COUNT_STEP=s32'00000000000000000000000000000001.\ready' using process `$paramod\counter\COUNT_STEP=s32'00000000000000000000000000000001.$proc$/Users/marwan/work/caravel_user_mpc/openlane/user_project/../../verilog/rtl/counter.v:68$10'.
  created $dff cell `$procdff$79' with positive edge clock.
Creating register for signal `$paramod\counter\COUNT_STEP=s32'00000000000000000000000000000001.\rdata' using process `$paramod\counter\COUNT_STEP=s32'00000000000000000000000000000001.$proc$/Users/marwan/work/caravel_user_mpc/openlane/user_project/../../verilog/rtl/counter.v:68$10'.
  created $dff cell `$procdff$80' with positive edge clock.

18. Executing PROC_MEMWR pass (convert process memory writes to cells).

19. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 8 empty switches in `$paramod\counter\COUNT_STEP=s32'00000000000000000000000000000001.$proc$/Users/marwan/work/caravel_user_mpc/openlane/user_project/../../verilog/rtl/counter.v:68$10'.
Removing empty process `$paramod\counter\COUNT_STEP=s32'00000000000000000000000000000001.$proc$/Users/marwan/work/caravel_user_mpc/openlane/user_project/../../verilog/rtl/counter.v:68$10'.
Cleaned up 8 empty switches.

20. Executing CHECK pass (checking for obvious problems).
Checking module user_project...
Warning: Wire user_project.\wbs_dat_o [31] is used but has no driver.
Warning: Wire user_project.\wbs_dat_o [30] is used but has no driver.
Warning: Wire user_project.\la_data_out [31] is used but has no driver.
Warning: Wire user_project.\la_data_out [30] is used but has no driver.
Warning: Wire user_project.\la_data_out [29] is used but has no driver.
Warning: Wire user_project.\la_data_out [28] is used but has no driver.
Warning: Wire user_project.\la_data_out [27] is used but has no driver.
Warning: Wire user_project.\la_data_out [26] is used but has no driver.
Warning: Wire user_project.\la_data_out [25] is used but has no driver.
Warning: Wire user_project.\la_data_out [24] is used but has no driver.
Warning: Wire user_project.\la_data_out [23] is used but has no driver.
Warning: Wire user_project.\la_data_out [22] is used but has no driver.
Warning: Wire user_project.\la_data_out [21] is used but has no driver.
Warning: Wire user_project.\la_data_out [20] is used but has no driver.
Warning: Wire user_project.\la_data_out [19] is used but has no driver.
Warning: Wire user_project.\la_data_out [18] is used but has no driver.
Warning: Wire user_project.\la_data_out [17] is used but has no driver.
Warning: Wire user_project.\la_data_out [16] is used but has no driver.
Warning: Wire user_project.\la_data_out [15] is used but has no driver.
Warning: Wire user_project.\la_data_out [14] is used but has no driver.
Warning: Wire user_project.\la_data_out [13] is used but has no driver.
Warning: Wire user_project.\la_data_out [12] is used but has no driver.
Warning: Wire user_project.\la_data_out [11] is used but has no driver.
Warning: Wire user_project.\la_data_out [10] is used but has no driver.
Warning: Wire user_project.\la_data_out [9] is used but has no driver.
Warning: Wire user_project.\la_data_out [8] is used but has no driver.
Warning: Wire user_project.\la_data_out [7] is used but has no driver.
Warning: Wire user_project.\la_data_out [6] is used but has no driver.
Warning: Wire user_project.\la_data_out [5] is used but has no driver.
Warning: Wire user_project.\la_data_out [4] is used but has no driver.
Warning: Wire user_project.\la_data_out [3] is used but has no driver.
Warning: Wire user_project.\la_data_out [2] is used but has no driver.
Warning: Wire user_project.\la_data_out [1] is used but has no driver.
Warning: Wire user_project.\la_data_out [0] is used but has no driver.
Warning: Wire user_project.\io_out [35] is used but has no driver.
Warning: Wire user_project.\io_out [34] is used but has no driver.
Warning: Wire user_project.\io_out [33] is used but has no driver.
Warning: Wire user_project.\io_out [32] is used but has no driver.
Warning: Wire user_project.\io_out [31] is used but has no driver.
Warning: Wire user_project.\io_out [30] is used but has no driver.
Warning: Wire user_project.\io_oeb [31] is used but has no driver.
Warning: Wire user_project.\io_oeb [30] is used but has no driver.
Warning: Wire user_project.\user_irq [2] is used but has no driver.
Warning: Wire user_project.\user_irq [1] is used but has no driver.
Warning: Wire user_project.\user_irq [0] is used but has no driver.
Checking module $paramod\counter\COUNT_STEP=s32'00000000000000000000000000000001...
Found and reported 45 problems.

21. Executing OPT_EXPR pass (perform const folding).
Optimizing module user_project.
Optimizing module $paramod\counter\COUNT_STEP=s32'00000000000000000000000000000001.
<suppressed ~6 debug messages>

22. Executing FLATTEN pass (flatten design).
Deleting now unused module $paramod\counter\COUNT_STEP=s32'00000000000000000000000000000001.
<suppressed ~1 debug messages>

23. Executing OPT_EXPR pass (perform const folding).
Optimizing module user_project.

24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \user_project..
Removed 3 unused cells and 38 unused wires.
<suppressed ~4 debug messages>

25. Executing OPT pass (performing simple optimizations).

25.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module user_project.

25.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\user_project'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

25.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \user_project..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

25.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \user_project.
Performed a total of 0 changes.

25.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\user_project'.
Removed a total of 0 cells.

25.6. Executing OPT_DFF pass (perform DFF optimizations).

25.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \user_project..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

25.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module user_project.

25.9. Rerunning OPT passes. (Maybe there is more to do..)

25.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \user_project..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

25.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \user_project.
Performed a total of 0 changes.

25.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\user_project'.
Removed a total of 0 cells.

25.13. Executing OPT_DFF pass (perform DFF optimizations).

25.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \user_project..

25.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module user_project.

25.16. Finished OPT passes. (There is nothing left to do.)

26. Executing FSM pass (extract and optimize FSM).

26.1. Executing FSM_DETECT pass (finding FSMs in design).

26.2. Executing FSM_EXTRACT pass (extracting FSM from design).

26.3. Executing FSM_OPT pass (simple optimizations of FSMs).

26.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \user_project..

26.5. Executing FSM_OPT pass (simple optimizations of FSMs).

26.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

26.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

26.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

27. Executing OPT pass (performing simple optimizations).

27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module user_project.

27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\user_project'.
Removed a total of 0 cells.

27.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \user_project..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

27.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \user_project.
Performed a total of 0 changes.

27.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\user_project'.
Removed a total of 0 cells.

27.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\count.$procdff$80 ($dff) from module user_project (D = \count.count, Q = \count.rdata).
Adding SRST signal on $flatten\count.$procdff$79 ($dff) from module user_project (D = $flatten\count.$procmux$73_Y, Q = \count.ready, rval = 1'0).
Adding SRST signal on $flatten\count.$procdff$78 ($dff) from module user_project (D = { $flatten\count.$procmux$25_Y $flatten\count.$procmux$61_Y $flatten\count.$procmux$37_Y $flatten\count.$procmux$49_Y }, Q = \count.count, rval = 30'000000000000000000000000000000).

27.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \user_project..
Removed 7 unused cells and 4 unused wires.
<suppressed ~8 debug messages>

27.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module user_project.

27.9. Rerunning OPT passes. (Maybe there is more to do..)

27.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \user_project..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

27.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \user_project.
Performed a total of 0 changes.

27.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\user_project'.
Removed a total of 0 cells.

27.13. Executing OPT_DFF pass (perform DFF optimizations).

27.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \user_project..

27.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module user_project.

27.16. Finished OPT passes. (There is nothing left to do.)

28. Executing WREDUCE pass (reducing word size of cells).
Removed top 2 bits (of 30) from port A of cell user_project.$not$/Users/marwan/work/caravel_user_mpc/openlane/user_project/../../verilog/rtl/user_project.v:68$4 ($not).
Removed top 31 bits (of 32) from port B of cell user_project.$flatten\count.$add$/Users/marwan/work/caravel_user_mpc/openlane/user_project/../../verilog/rtl/counter.v:75$13 ($add).
Removed top 2 bits (of 32) from port Y of cell user_project.$flatten\count.$add$/Users/marwan/work/caravel_user_mpc/openlane/user_project/../../verilog/rtl/counter.v:75$13 ($add).
Removed top 2 bits (of 32) from wire user_project.$flatten\count.$add$/Users/marwan/work/caravel_user_mpc/openlane/user_project/../../verilog/rtl/counter.v:75$13_Y.

29. Executing PEEPOPT pass (run peephole optimizers).

30. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \user_project..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

31. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module user_project:
  creating $macc model for $flatten\count.$add$/Users/marwan/work/caravel_user_mpc/openlane/user_project/../../verilog/rtl/counter.v:75$13 ($add).
  creating $alu model for $macc $flatten\count.$add$/Users/marwan/work/caravel_user_mpc/openlane/user_project/../../verilog/rtl/counter.v:75$13.
  creating $alu cell for $flatten\count.$add$/Users/marwan/work/caravel_user_mpc/openlane/user_project/../../verilog/rtl/counter.v:75$13: $auto$alumacc.cc:485:replace_alu$89
  created 1 $alu and 0 $macc cells.

32. Executing SHARE pass (SAT-based resource sharing).

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module user_project.

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\user_project'.
Removed a total of 0 cells.

33.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \user_project..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

33.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \user_project.
Performed a total of 0 changes.

33.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\user_project'.
Removed a total of 0 cells.

33.6. Executing OPT_DFF pass (perform DFF optimizations).

33.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \user_project..

33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module user_project.

33.9. Finished OPT passes. (There is nothing left to do.)

34. Executing MEMORY pass.

34.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

34.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

34.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

34.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

34.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

34.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \user_project..

34.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

34.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

34.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \user_project..

34.10. Executing MEMORY_COLLECT pass (generating $mem cells).

35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \user_project..

36. Executing OPT pass (performing simple optimizations).

36.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module user_project.
<suppressed ~34 debug messages>

36.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\user_project'.
Removed a total of 0 cells.

36.3. Executing OPT_DFF pass (perform DFF optimizations).

36.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \user_project..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

36.5. Finished fast OPT passes.

37. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

38. Executing OPT pass (performing simple optimizations).

38.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module user_project.

38.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\user_project'.
Removed a total of 0 cells.

38.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \user_project..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

38.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \user_project.
Performed a total of 0 changes.

38.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\user_project'.
Removed a total of 0 cells.

38.6. Executing OPT_SHARE pass.

38.7. Executing OPT_DFF pass (perform DFF optimizations).

38.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \user_project..

38.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module user_project.

38.10. Finished OPT passes. (There is nothing left to do.)

39. Executing TECHMAP pass (map to technology primitives).

39.1. Executing Verilog-2005 frontend: /nix/store/hsi2hxglwmlid19798r6swh0jn0l7isv-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/hsi2hxglwmlid19798r6swh0jn0l7isv-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

39.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $not.
Using template $paramod$44a13d10af618e7fbe7b9aad2f6151ffcee1e2fa\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011110 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~394 debug messages>

40. Executing OPT pass (performing simple optimizations).

40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module user_project.
<suppressed ~167 debug messages>

40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\user_project'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

40.3. Executing OPT_DFF pass (perform DFF optimizations).

40.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \user_project..
Removed 31 unused cells and 103 unused wires.
<suppressed ~32 debug messages>

40.5. Finished fast OPT passes.

41. Executing ABC pass (technology mapping using ABC).

41.1. Extracting gate netlist of module `\user_project' to `<abc-temp-dir>/input.blif'..
Extracted 328 gates and 462 wires to a netlist network with 134 inputs and 34 outputs.

41.1.1. Executing ABC.
Running ABC command: "/nix/store/w728d371dww8bw3ll6ham7slap368140-yosys-abc/bin/abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

41.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:               NOR cells:       27
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:               AND cells:       33
ABC RESULTS:              NAND cells:       14
ABC RESULTS:                OR cells:       42
ABC RESULTS:              XNOR cells:       14
ABC RESULTS:               XOR cells:       16
ABC RESULTS:            ANDNOT cells:       26
ABC RESULTS:               MUX cells:      121
ABC RESULTS:        internal signals:      294
ABC RESULTS:           input signals:      134
ABC RESULTS:          output signals:       34
Removing temp directory.

42. Executing OPT pass (performing simple optimizations).

42.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module user_project.
<suppressed ~30 debug messages>

42.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\user_project'.
Removed a total of 0 cells.

42.3. Executing OPT_DFF pass (perform DFF optimizations).

42.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \user_project..
Removed 1 unused cells and 193 unused wires.
<suppressed ~6 debug messages>

42.5. Finished fast OPT passes.

43. Executing HIERARCHY pass (managing design hierarchy).

43.1. Analyzing design hierarchy..
Top module:  \user_project

43.2. Analyzing design hierarchy..
Top module:  \user_project
Removed 0 unused modules.

44. Printing statistics.

=== user_project ===

   Number of wires:                324
   Number of wire bits:            796
   Number of public wires:          31
   Number of public wire bits:     503
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                356
     $_ANDNOT_                      26
     $_AND_                         33
     $_DFFE_PP_                     30
     $_MUX_                        121
     $_NAND_                        14
     $_NOR_                         27
     $_ORNOT_                        2
     $_OR_                          42
     $_SDFF_PP0_                    31
     $_XNOR_                        14
     $_XOR_                         16

45. Executing CHECK pass (checking for obvious problems).
Checking module user_project...
Found and reported 0 problems.

46. Generating Graphviz representation of design.
Writing dot description to `/Users/marwan/work/caravel_user_mpc/openlane/user_project/runs/RUN_2024.05.19_11.12.06/tmp/synthesis/post_techmap.dot'.
Dumping module user_project to page 1.

47. Executing SHARE pass (SAT-based resource sharing).

48. Executing OPT pass (performing simple optimizations).

48.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module user_project.

48.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\user_project'.
Removed a total of 0 cells.

48.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \user_project..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

48.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \user_project.
Performed a total of 0 changes.

48.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\user_project'.
Removed a total of 0 cells.

48.6. Executing OPT_DFF pass (perform DFF optimizations).

48.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \user_project..

48.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module user_project.

48.9. Finished OPT passes. (There is nothing left to do.)

49. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \user_project..
Removed 0 unused cells and 11 unused wires.
<suppressed ~11 debug messages>

50. Printing statistics.

=== user_project ===

   Number of wires:                313
   Number of wire bits:            609
   Number of public wires:          20
   Number of public wire bits:     316
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                356
     $_ANDNOT_                      26
     $_AND_                         33
     $_DFFE_PP_                     30
     $_MUX_                        121
     $_NAND_                        14
     $_NOR_                         27
     $_ORNOT_                        2
     $_OR_                          42
     $_SDFF_PP0_                    31
     $_XNOR_                        14
     $_XOR_                         16

mapping tbuf

51. Executing TECHMAP pass (map to technology primitives).

51.1. Executing Verilog-2005 frontend: /Users/marwan/work/caravel_user_sram/dependencies/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/Users/marwan/work/caravel_user_sram/dependencies/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

51.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

52. Executing SIMPLEMAP pass (map simple cells to gate primitives).

53. Executing TECHMAP pass (map to technology primitives).

53.1. Executing Verilog-2005 frontend: /Users/marwan/work/caravel_user_sram/dependencies/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/Users/marwan/work/caravel_user_sram/dependencies/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

53.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

54. Executing SIMPLEMAP pass (map simple cells to gate primitives).

55. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

55.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\user_project':
  mapped 61 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

56. Printing statistics.

=== user_project ===

   Number of wires:                374
   Number of wire bits:            670
   Number of public wires:          20
   Number of public wire bits:     316
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                417
     $_ANDNOT_                      26
     $_AND_                         33
     $_MUX_                        182
     $_NAND_                        14
     $_NOR_                         27
     $_ORNOT_                        2
     $_OR_                          42
     $_XNOR_                        14
     $_XOR_                         16
     sky130_fd_sc_hd__dfxtp_2       61

[INFO]: USING STRATEGY AREA 0

57. Executing ABC pass (technology mapping using ABC).

57.1. Extracting gate netlist of module `\user_project' to `/tmp/yosys-abc-7nCy0E/input.blif'..
Extracted 356 gates and 521 wires to a netlist network with 164 inputs and 63 outputs.

57.1.1. Executing ABC.
Running ABC command: "/nix/store/w728d371dww8bw3ll6ham7slap368140-yosys-abc/bin/abc" -s -f /tmp/yosys-abc-7nCy0E/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-7nCy0E/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-7nCy0E/input.blif 
ABC: + read_lib -w /Users/marwan/work/caravel_user_mpc/openlane/user_project/runs/RUN_2024.05.19_11.12.06/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.03 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/Users/marwan/work/caravel_user_mpc/openlane/user_project/runs/RUN_2024.05.19_11.12.06/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.04 sec
ABC: Memory =    9.54 MB. Time =     0.04 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /Users/marwan/work/caravel_user_mpc/openlane/user_project/runs/RUN_2024.05.19_11.12.06/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /Users/marwan/work/caravel_user_mpc/openlane/user_project/runs/RUN_2024.05.19_11.12.06/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + retime -D -D 30000 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 30000 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    320 (  8.4 %)   Cap = 10.2 ff (  3.6 %)   Area =     2766.40 ( 81.6 %)   Delay =  3103.01 ps  (  8.8 %)               
ABC: Path  0 --     102 : 0    4 pi                        A =   0.00  Df =  37.8  -21.5 ps  S =  58.0 ps  Cin =  0.0 ff  Cout =  11.2 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     257 : 2   12 sky130_fd_sc_hd__and2_2   A =   7.51  Df = 300.5  -33.4 ps  S = 203.5 ps  Cin =  1.5 ff  Cout =  38.2 ff  Cmax = 303.0 ff  G = 2442  
ABC: Path  2 --     306 : 5    1 sky130_fd_sc_hd__o2111a_2 A =  12.51  Df = 520.5  -26.5 ps  S =  37.0 ps  Cin =  2.4 ff  Cout =   1.6 ff  Cmax = 299.4 ff  G =   63  
ABC: Path  3 --     309 : 4    3 sky130_fd_sc_hd__and4_2   A =  10.01  Df = 727.8  -26.8 ps  S =  61.3 ps  Cin =  1.5 ff  Cout =   4.6 ff  Cmax = 300.3 ff  G =  297  
ABC: Path  4 --     310 : 2   85 sky130_fd_sc_hd__and2_2   A =   7.51  Df =1799.5 -441.7 ps  S =1411.8 ps  Cin =  1.5 ff  Cout = 284.0 ff  Cmax = 303.0 ff  G =18602  
ABC: Path  5 --     544 : 4    1 sky130_fd_sc_hd__a211o_2  A =  10.01  Df =2736.9 -642.0 ps  S =  61.5 ps  Cin =  2.4 ff  Cout =   4.6 ff  Cmax = 325.0 ff  G =  188  
ABC: Path  6 --     547 : 3    1 sky130_fd_sc_hd__a21oi_2  A =   8.76  Df =3103.0 -883.6 ps  S = 417.6 ps  Cin =  4.6 ff  Cout =  33.4 ff  Cmax = 128.2 ff  G =  733  
ABC: Start-point = pi101 (\wbs_cyc_i).  End-point = po62 ($auto$rtlil.cc:2684:MuxGate$1351).
ABC: + print_stats -m 
ABC: netlist                       : i/o =  164/   63  lat =    0  nd =   320  edge =    932  area =2766.80  delay = 8.00  lev = 8
ABC: + write_blif /tmp/yosys-abc-7nCy0E/output.blif 

57.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:       27
ABC RESULTS:   sky130_fd_sc_hd__o2111a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a31oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__nand4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a41o_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:       22
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:       41
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:       35
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__mux2_1 cells:       32
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:       18
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:       16
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:       28
ABC RESULTS:        internal signals:      294
ABC RESULTS:           input signals:      164
ABC RESULTS:          output signals:       63
Removing temp directory.

58. Executing SETUNDEF pass (replace undef values with defined constants).

59. Executing HILOMAP pass (mapping to constant drivers).

60. Executing SPLITNETS pass (splitting up multi-bit signals).

61. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \user_project..
Removed 0 unused cells and 569 unused wires.
<suppressed ~1 debug messages>

62. Executing INSBUF pass (insert buffer cells for connected wires).
Add user_project/$auto$insbuf.cc:97:execute$1771: \count.reset -> \io_oeb [0]
Add user_project/$auto$insbuf.cc:97:execute$1772: \count.reset -> \io_oeb [1]
Add user_project/$auto$insbuf.cc:97:execute$1773: \count.reset -> \io_oeb [2]
Add user_project/$auto$insbuf.cc:97:execute$1774: \count.reset -> \io_oeb [3]
Add user_project/$auto$insbuf.cc:97:execute$1775: \count.reset -> \io_oeb [4]
Add user_project/$auto$insbuf.cc:97:execute$1776: \count.reset -> \io_oeb [5]
Add user_project/$auto$insbuf.cc:97:execute$1777: \count.reset -> \io_oeb [6]
Add user_project/$auto$insbuf.cc:97:execute$1778: \count.reset -> \io_oeb [7]
Add user_project/$auto$insbuf.cc:97:execute$1779: \count.reset -> \io_oeb [8]
Add user_project/$auto$insbuf.cc:97:execute$1780: \count.reset -> \io_oeb [9]
Add user_project/$auto$insbuf.cc:97:execute$1781: \count.reset -> \io_oeb [10]
Add user_project/$auto$insbuf.cc:97:execute$1782: \count.reset -> \io_oeb [11]
Add user_project/$auto$insbuf.cc:97:execute$1783: \count.reset -> \io_oeb [12]
Add user_project/$auto$insbuf.cc:97:execute$1784: \count.reset -> \io_oeb [13]
Add user_project/$auto$insbuf.cc:97:execute$1785: \count.reset -> \io_oeb [14]
Add user_project/$auto$insbuf.cc:97:execute$1786: \count.reset -> \io_oeb [15]
Add user_project/$auto$insbuf.cc:97:execute$1787: \count.reset -> \io_oeb [16]
Add user_project/$auto$insbuf.cc:97:execute$1788: \count.reset -> \io_oeb [17]
Add user_project/$auto$insbuf.cc:97:execute$1789: \count.reset -> \io_oeb [18]
Add user_project/$auto$insbuf.cc:97:execute$1790: \count.reset -> \io_oeb [19]
Add user_project/$auto$insbuf.cc:97:execute$1791: \count.reset -> \io_oeb [20]
Add user_project/$auto$insbuf.cc:97:execute$1792: \count.reset -> \io_oeb [21]
Add user_project/$auto$insbuf.cc:97:execute$1793: \count.reset -> \io_oeb [22]
Add user_project/$auto$insbuf.cc:97:execute$1794: \count.reset -> \io_oeb [23]
Add user_project/$auto$insbuf.cc:97:execute$1795: \count.reset -> \io_oeb [24]
Add user_project/$auto$insbuf.cc:97:execute$1796: \count.reset -> \io_oeb [25]
Add user_project/$auto$insbuf.cc:97:execute$1797: \count.reset -> \io_oeb [26]
Add user_project/$auto$insbuf.cc:97:execute$1798: \count.reset -> \io_oeb [27]
Add user_project/$auto$insbuf.cc:97:execute$1799: \count.reset -> \io_oeb [28]
Add user_project/$auto$insbuf.cc:97:execute$1800: \count.reset -> \io_oeb [29]

63. Executing CHECK pass (checking for obvious problems).
Checking module user_project...
Found and reported 0 problems.

64. Printing statistics.

=== user_project ===

   Number of wires:                338
   Number of wire bits:            634
   Number of public wires:          20
   Number of public wire bits:     316
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                460
     sky130_fd_sc_hd__a211o_2       13
     sky130_fd_sc_hd__a21bo_2        6
     sky130_fd_sc_hd__a21boi_2       2
     sky130_fd_sc_hd__a21o_2         2
     sky130_fd_sc_hd__a21oi_2       28
     sky130_fd_sc_hd__a22o_2         4
     sky130_fd_sc_hd__a31o_2        41
     sky130_fd_sc_hd__a31oi_2        2
     sky130_fd_sc_hd__a32o_2         5
     sky130_fd_sc_hd__a41o_2         7
     sky130_fd_sc_hd__and2_2         9
     sky130_fd_sc_hd__and2b_2        1
     sky130_fd_sc_hd__and3_2        18
     sky130_fd_sc_hd__and4_2        13
     sky130_fd_sc_hd__buf_2         30
     sky130_fd_sc_hd__conb_1        49
     sky130_fd_sc_hd__dfxtp_2       61
     sky130_fd_sc_hd__inv_2         27
     sky130_fd_sc_hd__mux2_1        32
     sky130_fd_sc_hd__nand2_2       35
     sky130_fd_sc_hd__nand3_2        1
     sky130_fd_sc_hd__nand4_2        1
     sky130_fd_sc_hd__nor2_2        16
     sky130_fd_sc_hd__o2111a_2       1
     sky130_fd_sc_hd__o211a_2        3
     sky130_fd_sc_hd__o21a_2        14
     sky130_fd_sc_hd__o21ai_2       22
     sky130_fd_sc_hd__or2_2          4
     sky130_fd_sc_hd__or3b_2         1
     sky130_fd_sc_hd__xnor2_2        5
     sky130_fd_sc_hd__xor2_2         7

   Chip area for module '\user_project': 4397.968000

65. Executing Verilog backend.
Dumping module `\user_project'.

66. Executing JSON backend.

Warnings: 45 unique messages, 45 total
End of script. Logfile hash: ce4fc6f7c9, CPU: user 0.29s system 0.01s, MEM: 42.12 MB peak
Yosys 0.38 (git sha1 543faed9c8c, clang++ 16.0.6 -fPIC -Os)
Time spent: 66% 2x abc (0 sec), 9% 2x read_liberty (0 sec), ...
